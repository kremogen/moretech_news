import json
import sqlite3
import enum

import telebot
from telebot import types

bot = telebot.TeleBot('5684608047:AAFa-ki6eE395VkatiMJMPIsHItLpJHLdjE')
user_actions = dict()


class UserAction(enum.Enum):
    WAITING_FOR_ROLE_NAME = 0
    WAITING_FOR_CUSTOM_WORDS = 1


@bot.message_handler(content_types=['text'])
def start(message):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE id = ?', (message.from_user.id,))
    id = cursor.fetchone()
    conn.close()

    if message.text == '/start':
        if id is None:
            send_startup(message.from_user.id)
        else:
            if get_user_role(message.from_user.id) is None:
                send_role_choose(message.from_user.id)
            else:
                send_main_menu(message.from_user.id)
    else:
        if id is None:
            send_startup(message.from_user.id)
            return

        if message.from_user.id in user_actions.keys():
            if user_actions[message.from_user.id] == UserAction.WAITING_FOR_ROLE_NAME:
                conn = sqlite3.connect("users.db")
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET custom_role = ? WHERE id = ?',
                               [message.text, message.from_user.id])
                conn.commit()
                conn.close()
                del user_actions[message.from_user.id]
            elif user_actions[message.from_user.id] == UserAction.WAITING_FOR_CUSTOM_WORDS:
                conn = sqlite3.connect("users.db")
                cursor = conn.cursor()
                sp = message.text.split(', ')
                cursor.execute('UPDATE users SET custom_words = ? WHERE id = ?',
                               [json.dumps(sp), message.from_user.id])
                conn.commit()
                conn.close()
                del user_actions[message.from_user.id]

        send_main_menu(message.from_user.id)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == 'startup':
        send_role_choose(call.from_user.id)
    elif call.data == 'back':
        send_main_menu(call.from_user.id)
    elif call.data == 'acc':
        update_user_role(call.from_user.id, 'acc')
        send_main_menu(call.from_user.id)
    elif call.data == 'boss':
        update_user_role(call.from_user.id, 'boss')
        send_main_menu(call.from_user.id)
    elif call.data == 'another':
        bot.send_message(call.message.chat.id, 'üìé –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (1-2 —Å–ª–æ–≤–∞):')
        update_user_role(call.from_user.id, 'another')
        user_actions[call.from_user.id] = UserAction.WAITING_FOR_ROLE_NAME
    elif call.data == 'key_words':
        bot.send_message(call.message.chat.id, f'üìå –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π '
                                               f'–º–æ–∂–µ—Ç –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å –≤–∞—à—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:')
        user_actions[call.from_user.id] = UserAction.WAITING_FOR_CUSTOM_WORDS
    elif call.data == 'trending':
        role = get_user_role(call.from_user.id)
        if role is None:
            send_startup(call.from_user.id)
            return

        import main

        news = main.get_news()[role[0]]
        le = len(news)

        for i in range(le):
            if i == le - 1:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
                bot.send_message(call.message.chat.id, news['Link'][i], reply_markup=keyboard)
                return
            bot.send_message(call.message.chat.id, news['Link'][i])

    elif call.data == 'insights':
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
        bot.send_message(call.message.chat.id, 'Insights', reply_markup=keyboard)
    elif call.data == 'digests':
        role = get_user_role(call.from_user.id)
        if role is None:
            send_startup(call.from_user.id)
            return

        import main

        news = main.get_news()[role[0]]
        le = len(news)

        for i in range(le):
            if i == le - 1:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))
                bot.send_message(call.message.chat.id, 'üìÜ ' + news['Digest'][i][2:-2], reply_markup=keyboard)
                return
            bot.send_message(call.message.chat.id, 'üìÜ ' + news['Digest'][i][2:-2])


def send_startup(id: int):
    create_user_profile(id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='startup'))
    bot.send_message(id,
                     f'ü§ñ –ü—Ä–∏–≤–µ—Ç, —è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã–π –ë–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –º–∏—Ä–µ '
                     f'–±–∏–∑–Ω–µ—Å–∞.\n\nüìö –ú–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–µ—Å–æ–≤ '
                     f'–≤ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Å—Ñ–µ—Ä–µ.\n\nüëâ –ù—É —á—Ç–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º?!',
                     reply_markup=keyboard)


def get_user_role(id: int) -> str or None:
    conn2 = sqlite3.connect("users.db")
    cursor2 = conn2.cursor()
    cursor2.execute('SELECT role FROM users WHERE id = ?', (id,))
    role = cursor2.fetchone()
    conn2.close()
    return role


def get_user_custom_words(id: int) -> dict or None:
    conn2 = sqlite3.connect("users.db")
    cursor2 = conn2.cursor()
    cursor2.execute('SELECT custom_words FROM users WHERE id = ?', (id,))
    words = cursor2.fetchone()
    conn2.close()
    return json.loads(words[0]) if words[0] is not None else None


def get_custom_user_role(id: int):
    conn2 = sqlite3.connect("users.db")
    cursor2 = conn2.cursor()
    cursor2.execute('SELECT custom_role FROM users WHERE id = ?', (id,))
    role = cursor2.fetchone()
    conn2.close()
    return role


def send_role_choose(id: int):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º', callback_data='boss'))
    keyboard.add(types.InlineKeyboardButton(text='–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è', callback_data='acc'))
    keyboard.add(types.InlineKeyboardButton(text='–î—Ä—É–≥–æ–µ', callback_data='another'))
    bot.send_message(id, 'üï∫ –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:',
                     reply_markup=keyboard)


def send_main_menu(id: int):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='üìà –í —Ç—Ä–µ–Ω–¥–µ!', callback_data='trending'))
    keyboard.add(types.InlineKeyboardButton(text='üìä –ò–Ω—Å–∞–π—Ç—ã', callback_data='insights'))
    keyboard.add(types.InlineKeyboardButton(text='üìù –î–∞–π–¥–∂–µ—Å—Ç—ã', callback_data='digests'))
    keyboard.add(types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã', callback_data='startup'))

    role_name = get_user_role(id)[0]
    if role_name == 'boss':
        role_name = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º'
    elif role_name == 'acc':
        role_name = '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'
    elif role_name == 'another':
        role_name = get_custom_user_role(id)[0]
        words = get_user_custom_words(id)

        keyboard.add(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data='key_words'))
        bot.send_message(id,
                         f'üìå –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {str(role_name)}\n –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: '
                         f'{("–ù–µ –∑–∞–¥–∞–Ω—ã" if words is None else ", ".join(words))}'
                         f'\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏:',
                         reply_markup=keyboard)
        return
    else:
        # todo: maybe NPE
        pass

    bot.send_message(id, f'üìå –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {str(role_name)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏:',
                     reply_markup=keyboard)


def create_user_profile(id: int) -> None:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('INSERT INTO users (id) VALUES (?)', [id])
    conn.commit()
    conn.close()


def update_user_role(id: int, role: str) -> None:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET role = ? WHERE id = ?', [role, id])
    conn.commit()
    conn.close()


def init_db():
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users')
        cursor.close()
        conn.close()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É!')
    except Exception:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(
            'CREATE TABLE users (id INTEGER PRIMARY KEY NOT NULL, role TEXT DEFAULT NULL, custom_role TEXT DEFAULT NULL, custom_words TEXT DEFAULT NULL)'
        )
        conn.commit()
        conn.close()
        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –∏ –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É!')


def start_bot():
    init_db()
    bot.polling(none_stop=True, interval=0)
